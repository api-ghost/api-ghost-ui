import { HistoryItem } from '@/types/index.ts';

export const mockHistoryList: HistoryItem[] = [
  {
    id: 'SC-001',
    title: 'Sign-Up Scenario',
    description: 'Verifies the sign-up process and login for a new user',
    executedAt: '2025-04-23T14:15:00+09:00',
    totalDurationMs: 550,
    averageDurationMs: 275,
    filePath: '/local/result/user',
    baseUrl: 'http://localhost:8080',
    isScenarioSuccess: false,
    results: [
      {
        endpoint: '/api/signup',
        method: 'POST',
        requestBody: { email: 'test@test.com', password: '1234' },
        requestHeader: { Authorization: 'Bearer abc.def.ghi', contentType: 'application/json' },
        responseBody: { status: 'success' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-23T14:15:01.000+09:00',
        endTime: '2025-04-23T14:15:01.300+09:00',
        durationMs: 300,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/login',
        method: 'POST',
        requestBody: { email: 'test@test.com', password: '1234' },
        requestHeaders: {
          Authorization: 'Bearer abc.def.ghi',
          'Content-Type': 'application/json',
        },
        responseBody: { error: 'User not found' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 404,
        startTime: '2025-04-23T14:15:02.000+09:00',
        endTime: '2025-04-23T14:15:02.250+09:00',
        durationMs: 250,
        isRequestSuccess: false,
      },
    ],
  },
  {
    id: 'SC-003',
    title: 'Successful Login and Logout',
    description: 'Verifies login followed by logout',
    executedAt: '2025-04-24T10:00:00+09:00',
    totalDurationMs: 420,
    averageDurationMs: 210,
    filePath: '/local/result/auth',
    baseUrl: 'http://localhost:8080',
    isScenarioSuccess: true,
    results: [
      {
        endpoint: '/api/login',
        method: 'POST',
        requestBody: { email: 'user@example.com', password: 'pass1234' },
        requestHeaders: { 'Content-Type': 'application/json' },
        responseBody: { token: 'xyz.abc.def' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-24T10:00:01.000+09:00',
        endTime: '2025-04-24T10:00:01.200+09:00',
        durationMs: 200,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/logout',
        method: 'POST',
        requestBody: {},
        requestHeaders: { Authorization: 'Bearer xyz.abc.def' },
        responseBody: { message: 'Logged out' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-24T10:00:02.000+09:00',
        endTime: '2025-04-24T10:00:02.220+09:00',
        durationMs: 220,
        isRequestSuccess: true,
      },
    ],
  },
  {
    id: 'SC-004',
    title: 'Product Query Scenario',
    description: 'Checks product list and detail view',
    executedAt: '2025-04-24T11:30:00+09:00',
    totalDurationMs: 350,
    averageDurationMs: 175,
    filePath: '/local/result/product',
    baseUrl: 'http://localhost:8080',
    isScenarioSuccess: true,
    results: [
      {
        endpoint: '/api/products',
        method: 'GET',
        requestBody: {},
        requestHeaders: {},
        responseBody: { products: [{ id: 1, name: 'Book' }] },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-24T11:30:01.000+09:00',
        endTime: '2025-04-24T11:30:01.150+09:00',
        durationMs: 150,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/products/1',
        method: 'GET',
        requestBody: {},
        requestHeaders: {},
        responseBody: { id: 1, name: 'Book', price: 10000 },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-24T11:30:02.000+09:00',
        endTime: '2025-04-24T11:30:02.200+09:00',
        durationMs: 200,
        isRequestSuccess: true,
      },
    ],
  },
  {
    id: 'SC-005',
    title: 'Order Failure Scenario',
    description: 'Order failure due to out-of-stock product',
    executedAt: '2025-04-25T09:10:00+09:00',
    totalDurationMs: 300,
    averageDurationMs: 300,
    filePath: '/local/result/order',
    baseUrl: 'http://localhost:8080',
    isScenarioSuccess: false,
    results: [
      {
        endpoint: '/api/orders',
        method: 'POST',
        requestBody: { productId: 999, quantity: 5 },
        requestHeaders: { Authorization: 'Bearer xyz.abc.def' },
        responseBody: { error: 'Out of stock' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 400,
        startTime: '2025-04-25T09:10:01.000+09:00',
        endTime: '2025-04-25T09:10:01.300+09:00',
        durationMs: 300,
        isRequestSuccess: false,
      },
    ],
  },
  {
    id: 'SC-006',
    title: 'Password Reset',
    description: 'Verifies the password reset process',
    executedAt: '2025-04-26T12:45:00+09:00',
    totalDurationMs: 450,
    averageDurationMs: 225,
    filePath: '/local/result/user',
    baseUrl: 'http://localhost:8080',
    isScenarioSuccess: true,
    results: [
      {
        endpoint: '/api/forgot-password',
        method: 'POST',
        requestBody: { email: 'reset@user.com' },
        requestHeaders: { 'Content-Type': 'application/json' },
        responseBody: { message: 'Email sent' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-26T12:45:01.000+09:00',
        endTime: '2025-04-26T12:45:01.200+09:00',
        durationMs: 200,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/reset-password',
        method: 'POST',
        requestBody: { token: 'reset-token', newPassword: 'newpass123' },
        requestHeaders: { 'Content-Type': 'application/json' },
        responseBody: { status: 'success' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-26T12:45:02.000+09:00',
        endTime: '2025-04-26T12:45:02.250+09:00',
        durationMs: 250,
        isRequestSuccess: true,
      },
    ],
  },
  {
    id: 'SC-003',
    title: 'Complex User Flow Scenario',
    description: 'Verifies the entire flow: Sign Up → Login → Retrieve/Update Info → Logout, etc.',
    executedAt: '2025-04-29T10:00:00+09:00',
    totalDurationMs: 1480,
    averageDurationMs: 148,
    filePath: '/local/result/flow',
    baseUrl: 'http://localhost:8080',
    isScenarioSuccess: true,
    results: [
      {
        endpoint: '/api/signup',
        method: 'POST',
        requestBody: { email: 'user@example.com', password: 'pass1234' },
        requestHeader: { 'Content-Type': 'application/json' },
        responseBody: { status: 'created' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 201,
        startTime: '2025-04-29T10:00:01.000+09:00',
        endTime: '2025-04-29T10:00:01.150+09:00',
        durationMs: 150,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/login',
        method: 'POST',
        requestBody: { email: 'user@example.com', password: 'pass1234' },
        requestHeaders: { 'Content-Type': 'application/json' },
        responseBody: { token: 'jwt.token.value' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-29T10:00:01.200+09:00',
        endTime: '2025-04-29T10:00:01.350+09:00',
        durationMs: 150,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/user/profile',
        method: 'GET',
        requestBody: {},
        requestHeaders: { Authorization: 'Bearer jwt.token.value' },
        responseBody: { name: 'Hong Gil-dong', email: 'user@example.com' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-29T10:00:01.400+09:00',
        endTime: '2025-04-29T10:00:01.500+09:00',
        durationMs: 100,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/user/settings',
        method: 'PUT',
        requestBody: { marketingConsent: true },
        requestHeaders: { Authorization: 'Bearer jwt.token.value' },
        responseBody: { status: 'updated' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-29T10:00:01.600+09:00',
        endTime: '2025-04-29T10:00:01.730+09:00',
        durationMs: 130,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/notifications',
        method: 'GET',
        requestBody: {},
        requestHeaders: { Authorization: 'Bearer jwt.token.value' },
        responseBody: { count: 3, items: [] },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-29T10:00:01.800+09:00',
        endTime: '2025-04-29T10:00:01.900+09:00',
        durationMs: 100,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/user/change-password',
        method: 'POST',
        requestBody: { oldPassword: 'pass1234', newPassword: 'newpass5678' },
        requestHeaders: { Authorization: 'Bearer jwt.token.value' },
        responseBody: { status: 'password_changed' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-29T10:00:02.000+09:00',
        endTime: '2025-04-29T10:00:02.150+09:00',
        durationMs: 150,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/logout',
        method: 'POST',
        requestBody: {},
        requestHeaders: { Authorization: 'Bearer jwt.token.value' },
        responseBody: { status: 'logged_out' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-29T10:00:02.200+09:00',
        endTime: '2025-04-29T10:00:02.300+09:00',
        durationMs: 100,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/login',
        method: 'POST',
        requestBody: { email: 'user@example.com', password: 'wrongpass' },
        requestHeaders: { 'Content-Type': 'application/json' },
        responseBody: { error: 'invalid_credentials' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 401,
        startTime: '2025-04-29T10:00:02.400+09:00',
        endTime: '2025-04-29T10:00:02.500+09:00',
        durationMs: 100,
        isRequestSuccess: false,
      },
      {
        endpoint: '/api/login',
        method: 'POST',
        requestBody: { email: 'user@example.com', password: 'newpass5678' },
        requestHeaders: { 'Content-Type': 'application/json' },
        responseBody: { token: 'jwt.token.new' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-29T10:00:02.600+09:00',
        endTime: '2025-04-29T10:00:02.700+09:00',
        durationMs: 100,
        isRequestSuccess: true,
      },
      {
        endpoint: '/api/user/delete',
        method: 'DELETE',
        requestBody: {},
        requestHeaders: { Authorization: 'Bearer jwt.token.new' },
        responseBody: { status: 'deleted' },
        responseHeaders: { contentType: 'application/json' },
        statusCode: 200,
        startTime: '2025-04-29T10:00:02.800+09:00',
        endTime: '2025-04-29T10:00:02.900+09:00',
        durationMs: 100,
        isRequestSuccess: true,
      },
    ],
  },
];
